# handlers/user.py
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from config import (
    ADMIN_USERNAME,
    MIN_WITHDRAW_AMOUNT,
    REFERRAL_PERCENTAGE,
    LOTTERY_TICKET_PRICE,
    MAX_CLICKS_PER_DAY,
    CLICK_COOLDOWN,
)
from database import Database
from keyboards.inline import (
    main_menu,
    profile_menu,
    check_subscription_menu,
    back_button,
    lottery_menu,
)
from utils.check_subscription import check_subscriptions
from utils.higher_lower import (
    start_higher_lower_game,
    process_bet,
    process_choice,
    process_user_dice,
    GameStates,
)
from utils.lottery import buy_lottery_ticket
import random
import time
from datetime import date

db = Database()


async def start_cmd(message: types.Message):
    referrer_id = None
    args = message.get_args()
    if args.isdigit():
        referrer_id = int(args)
        if referrer_id == message.from_user.id:
            referrer_id = None
    db.add_user(message.from_user.id, message.from_user.username, referrer_id)
    if referrer_id:
        db.increment_invited(referrer_id)
        db.update_balance(referrer_id, 0.7)  # –ù–∞—á–∏—Å–ª—è–µ–º 100 —Ä—É–±–ª–µ–π —Ä–µ—Ñ–µ—Ä–µ—Ä—É

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        notification_text = f"""
<b>üë• –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª!</b>

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ.

<b>üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å: 0.7 üåü.</b>
"""
        try:
            await message.bot.send_message(referrer_id, notification_text, parse_mode='HTML')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    is_subscribed = await check_subscriptions(message.from_user.id)
    if not is_subscribed:
        subscription_text = """
‚ùóÔ∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É".
"""
        await message.answer(subscription_text, reply_markup=check_subscription_menu())
        return

    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
"""
    await message.answer(welcome_text, reply_markup=main_menu(), parse_mode='HTML')


async def profile_callback(call: types.CallbackQuery):
    is_subscribed = await check_subscriptions(call.from_user.id)
    if not is_subscribed:
        subscription_text = """
‚ùóÔ∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É".
"""
        await call.message.answer(subscription_text, reply_markup=check_subscription_menu())
        return

    user = db.get_user(call.from_user.id)
    profile_text = f"""
üßæ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

üí∞ <b>–ë–∞–ª–∞–Ω—Å</b>: {user[3]} üåü
üë• <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ</b>: {user[4]} —á–µ–ª–æ–≤–µ–∫
"""
    photos = await call.bot.get_user_profile_photos(call.from_user.id)
    if photos.total_count > 0:
        await call.message.answer_photo(
            photos.photos[0][0].file_id,
            caption=profile_text,
            reply_markup=profile_menu(),
            parse_mode='HTML',
        )
    else:
        await call.message.answer(profile_text, reply_markup=profile_menu(), parse_mode='HTML')


# –ú–∏–Ω–∏-–∏–≥—Ä–∞ (–∫–ª–∏–∫–∞–ª–∫–∞) —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
async def play_game_callback(call: types.CallbackQuery):
    is_subscribed = await check_subscriptions(call.from_user.id)
    if not is_subscribed:
        subscription_text = """
‚ùóÔ∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É".
"""
        await call.message.answer(subscription_text, reply_markup=check_subscription_menu())
        return

    user = db.get_user(call.from_user.id)
    current_time = int(time.time())
    last_click_time = user[6]  # –ò–Ω–¥–µ–∫—Å 6 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—é last_click_time
    daily_clicks = user[5]  # –ò–Ω–¥–µ–∫—Å 5 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—é daily_clicks

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    if current_time - last_click_time < CLICK_COOLDOWN:
        remaining_time = CLICK_COOLDOWN - (current_time - last_click_time)
        await call.answer(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining_time} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫–ª–∏–∫–æ–º.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–∫–æ–≤ –≤ –¥–µ–Ω—å
    if daily_clicks >= MAX_CLICKS_PER_DAY:
        await call.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!", show_alert=True)
        return

    win_amount = random.randint(1, 50)
    db.update_balance(call.from_user.id, win_amount)
    db.increment_daily_clicks(call.from_user.id)
    db.update_last_click_time(call.from_user.id, current_time)

    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
    if user[2]:
        referrer_id = user[2]
        bonus = int(win_amount * REFERRAL_PERCENTAGE / 100)
        db.update_balance(referrer_id, bonus)
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É –æ –≤—ã–∏–≥—Ä—ã—à–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        notification_text = f"""
<b>üí∞ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –≤—ã–∏–≥—Ä–∞–ª {win_amount} —Ä—É–±–ª–µ–π!</b>

–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å <b>{bonus} —Ä—É–±–ª–µ–π</b> ({REFERRAL_PERCENTAGE}% –æ—Ç –≤—ã–∏–≥—Ä—ã—à–∞).
"""
        try:
            await call.bot.send_message(referrer_id, notification_text, parse_mode='HTML')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É: {e}")

    user = db.get_user(call.from_user.id)
    remaining_clicks = MAX_CLICKS_PER_DAY - user[5]  # daily_clicks

    message_text = f"""
üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>

–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ <b>{win_amount} —Ä—É–±–ª–µ–π</b> –≤ –º–∏–Ω–∏-–∏–≥—Ä–µ!

–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user[3]} —Ä—É–±–ª–µ–π</b>
–û—Å—Ç–∞–ª–æ—Å—å –∫–ª–∏–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: <b>{remaining_clicks}</b>
"""
    await call.message.answer(message_text, parse_mode='HTML')


# –ò–≥—Ä–∞ "–ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ"
async def higher_lower_game_callback(call: types.CallbackQuery, state: FSMContext):
    await start_higher_lower_game(call, state, db)


async def lottery_callback(call: types.CallbackQuery):
    await call.message.answer(
        "üéü <b>–õ–æ—Ç–µ—Ä–µ—è</b>\n\n–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ. –ö–∞–∂–¥—ã–π –±–∏–ª–µ—Ç —Å—Ç–æ–∏—Ç 10 —Ä—É–±–ª–µ–π –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤–∞—à —à–∞–Ω—Å –Ω–∞ –ø–æ–±–µ–¥—É.",
        reply_markup=lottery_menu(),
        parse_mode='HTML',
    )


async def buy_ticket_callback(call: types.CallbackQuery):
    await buy_lottery_ticket(call, db)


async def referral_link_callback(call: types.CallbackQuery):
    is_subscribed = await check_subscriptions(call.from_user.id)
    if not is_subscribed:
        subscription_text = """
‚ùóÔ∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É".
"""
        await call.message.answer(subscription_text, reply_markup=check_subscription_menu())
        return

    bot_username = (await call.bot.get_me()).username
    link = f"https://t.me/{bot_username}?start={call.from_user.id}"
    message_text = f"""
üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>

–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º —ç—Ç—É —Å—Å—ã–ª–∫—É:

üëâ {link}

üí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ <b>0.7 üåü</b>, –∞ —Ç–∞–∫–∂–µ <b>{REFERRAL_PERCENTAGE}%</b> –æ—Ç –∏—Ö –¥–æ—Ö–æ–¥–∞!
"""
    await call.message.edit_text(message_text, reply_markup=back_button(), parse_mode='HTML')


async def withdraw_callback(call: types.CallbackQuery):
    is_subscribed = await check_subscriptions(call.from_user.id)
    if not is_subscribed:
        subscription_text = """
‚ùóÔ∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É".
"""
        await call.message.answer(subscription_text, reply_markup=check_subscription_menu())
        return

    user = db.get_user(call.from_user.id)
    if user[3] < MIN_WITHDRAW_AMOUNT:
        await call.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAW_AMOUNT} ‚≠ê.", show_alert=True)
        return

    db.add_withdraw_request(call.from_user.id, user[3])
    db.update_balance(call.from_user.id, -user[3])

    message_text = f"""
üí≥ <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>

–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ <b>{user[3]} ‚≠ê</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.

–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!
"""
    await call.message.answer(message_text, parse_mode='HTML')
    admin_message = f"""
üì¨ <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{call.from_user.username}
ID: {call.from_user.id}
–°—É–º–º–∞: {user[3]} —Ä—É–±–ª–µ–π

–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /process_withdraw {call.from_user.id}
"""
    await call.bot.send_message(f'@{ADMIN_USERNAME}', admin_message, parse_mode='HTML')


async def check_subscriptions_callback(call: types.CallbackQuery):
    is_subscribed = await check_subscriptions(call.from_user.id)
    if is_subscribed:
        await call.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await call.message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:", reply_markup=main_menu())
    else:
        await call.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.", show_alert=True)


async def back_to_menu_callback(call: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.edit_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


def register_user_handlers(dp: Dispatcher):
    dp.register_message_handler(start_cmd, commands=['start'])
    dp.register_callback_query_handler(profile_callback, text='profile')
    dp.register_callback_query_handler(play_game_callback, text='mini_game')
    dp.register_callback_query_handler(higher_lower_game_callback, text='play_game', state='*')
    dp.register_message_handler(process_bet, state=GameStates.waiting_for_bet)
    dp.register_callback_query_handler(process_choice, state=GameStates.waiting_for_choice)
    dp.register_callback_query_handler(process_user_dice, text='roll_dice', state=GameStates.waiting_for_user_dice)
    dp.register_callback_query_handler(lottery_callback, text='lottery')
    dp.register_callback_query_handler(buy_ticket_callback, text='buy_ticket')
    dp.register_callback_query_handler(referral_link_callback, text='referral_link')
    dp.register_callback_query_handler(withdraw_callback, text='withdraw')
    dp.register_callback_query_handler(check_subscriptions_callback, text='check_subscriptions')
    dp.register_callback_query_handler(back_to_menu_callback, text='back_to_menu', state='*')
