# utils/higher_lower.py
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import MIN_BET, REFERRAL_PERCENTAGE
from keyboards.inline import game_choice_menu, game_bet_menu, game_result_menu
from database import Database

db = Database()

class GameStates(StatesGroup):
    waiting_for_bet = State()
    waiting_for_choice = State()
    waiting_for_user_dice = State()

async def start_higher_lower_game(call: types.CallbackQuery, state: FSMContext, db: Database):
    await call.message.answer(f"üé≤ <b>–ò–≥—Ä–∞: –ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ</b>\n\nüí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É (–º–∏–Ω–∏–º—É–º {MIN_BET} —Ä—É–±–ª–µ–π):", parse_mode='HTML')
    await GameStates.waiting_for_bet.set()

async def process_bet(message: types.Message, state: FSMContext):
    try:
        bet_amount = float(message.text)
        if bet_amount < MIN_BET:
            await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {MIN_BET} —Ä—É–±–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ.")
            return
        user = db.get_user(message.from_user.id)
        if user[3] < bet_amount:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.finish()
            return
        await state.update_data(bet_amount=bet_amount)
        await message.answer(f"üé≤ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet_amount} —Ä—É–±–ª–µ–π.\n–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥:", reply_markup=game_choice_menu(), parse_mode='HTML')
        await GameStates.waiting_for_choice.set()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")

async def process_choice(call: types.CallbackQuery, state: FSMContext):
    user_choice = call.data  # 'more' –∏–ª–∏ 'less'
    await state.update_data(user_choice=user_choice)

    # –•–æ–¥ –±–æ—Ç–∞
    bot_dice_message = await call.bot.send_dice(call.from_user.id)
    bot_dice_value = bot_dice_message.dice.value
    await state.update_data(bot_dice_value=bot_dice_value)

    await call.message.answer(f"üé≤ –ë–æ—Ç –∫–∏–Ω—É–ª –∫—É–±–∏–∫, –∏ –≤—ã–ø–∞–ª–æ: {bot_dice_value}.\n–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!\n–ö–∏–¥–∞–π—Ç–µ –∫—É–±–∏–∫:", reply_markup=game_bet_menu(), parse_mode='HTML')
    await GameStates.waiting_for_user_dice.set()

async def process_user_dice(call: types.CallbackQuery, state: FSMContext):
    user_dice_message = await call.bot.send_dice(call.from_user.id)
    user_dice_value = user_dice_message.dice.value

    data = await state.get_data()
    bet_amount = data['bet_amount']
    user_choice = data['user_choice']
    bot_dice_value = data['bot_dice_value']

    result = None
    win_amount = 0

    if user_choice == 'more':
        if user_dice_value > bot_dice_value:
            result = 'win'
            win_amount = bet_amount * 1.5
        else:
            result = 'lose'
    elif user_choice == 'less':
        if user_dice_value < bot_dice_value:
            result = 'win'
            win_amount = bet_amount * 1.5
        else:
            result = 'lose'

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if result == 'win':
        db.update_balance(call.from_user.id, win_amount)
        message_text = f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} —Ä—É–±–ª–µ–π! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\nüèÜ –ë–∞–ª–∞–Ω—Å: {db.get_user(call.from_user.id)[3]} —Ä—É–±–ª–µ–π"
    else:
        db.update_balance(call.from_user.id, -bet_amount)
        message_text = f"üòû –£–≤—ã, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ {bet_amount} —Ä—É–±–ª–µ–π —Å–ø–∏—Å–∞–Ω–∞.\nüèÜ –ë–∞–ª–∞–Ω—Å: {db.get_user(call.from_user.id)[3]} —Ä—É–±–ª–µ–π"

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –∏–≥—Ä—ã
    db.add_game_log(call.from_user.id, bet_amount, user_dice_value, bot_dice_value, result)

    # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
    user = db.get_user(call.from_user.id)
    if user[2]:
        referrer_id = user[2]
        referral_bonus = bet_amount * REFERRAL_PERCENTAGE / 100
        db.update_balance(referrer_id, referral_bonus)
        db.update_referral_income(referrer_id, referral_bonus)
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        notification_text = f"""
<b>üí∞ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —Å–¥–µ–ª–∞–ª —Å—Ç–∞–≤–∫—É {bet_amount} —Ä—É–±–ª–µ–π –≤ –∏–≥—Ä–µ "–ë–æ–ª—å—à–µ/–ú–µ–Ω—å—à–µ".</b>

–í—ã –ø–æ–ª—É—á–∏–ª–∏ {referral_bonus} —Ä—É–±–ª–µ–π ({REFERRAL_PERCENTAGE}% –æ—Ç —Å—Ç–∞–≤–∫–∏).
"""
        try:
            await call.bot.send_message(referrer_id, notification_text, parse_mode='HTML')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É: {e}")

    await call.message.answer(message_text, reply_markup=game_result_menu(), parse_mode='HTML')
    await state.finish()
